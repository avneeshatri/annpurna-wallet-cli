package {{package}};

import org.annpurna.wallet.cli.util.ResponseUtil;
import org.annpurna.wallet.cli.exception.AnnpurnaServiceException;
import org.annpurna.wallet.cli.exception.AnnpurnaServiceException.ErrorCode;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import {{modelPackage}}.*;
import {{package}}.{{classname}}Service;
import {{package}}.factories.{{classname}}ServiceFactory;

import io.swagger.annotations.ApiParam;
import io.swagger.jaxrs.*;

import javax.servlet.http.HttpServletRequest;

{{#imports}}import {{import}};
{{/imports}}

import java.util.Map;
import java.util.List;
import {{package}}.NotFoundException;

import java.io.InputStream;

import org.glassfish.jersey.media.multipart.FormDataContentDisposition;
import org.glassfish.jersey.media.multipart.FormDataParam;

import javax.ws.rs.container.ResourceInfo;
import javax.servlet.ServletConfig;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import javax.ws.rs.*;
{{#useBeanValidation}}
import javax.validation.constraints.*;
{{/useBeanValidation}}

@Path("/{{{baseName}}}")
{{#hasConsumes}}@Consumes({ {{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} }){{/hasConsumes}}
{{#hasProduces}}@Produces({ {{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }){{/hasProduces}}
@io.swagger.annotations.Api(description = "the {{{baseName}}} API")
{{>generatedAnnotation}}
{{#operations}}
public class {{classname}}  {
   private static final Logger LOGGER = LoggerFactory.getLogger({{classname}}.class);
   private final {{classname}}Service delegate;

   public {{classname}}(@Context ServletConfig servletContext,@Context SecurityContext securityContext) {
      {{classname}}Service delegate = null;

      if (servletContext != null) {
         String implClass = servletContext.getInitParameter("{{classname}}.implementation");
         if (implClass != null && !"".equals(implClass.trim())) {
            try {
               delegate = ({{classname}}Service) Class.forName(implClass).newInstance();
            } catch (Exception e) {
               throw new RuntimeException(e);
            }
         } 
      }

      if (delegate == null) {
         delegate = {{classname}}ServiceFactory.get{{classname}}();
      }

      this.delegate = delegate;
   }

{{#operation}}
    @{{httpMethod}}
    {{#subresourceOperation}}@Path("{{{path}}}"){{/subresourceOperation}}
    {{#hasConsumes}}@Consumes({ {{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} }){{/hasConsumes}}
    {{#hasProduces}}@Produces({ {{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }){{/hasProduces}}  
    {{#hasAuthMethods}}     
    {{/hasAuthMethods}}
    @io.swagger.annotations.ApiOperation(value = "{{{summary}}}", notes = "{{{notes}}}", response = {{{returnBaseType}}}.class{{#returnContainer}}, responseContainer = "{{{returnContainer}}}"{{/returnContainer}}{{#hasAuthMethods}}, authorizations = {
        {{#authMethods}}@io.swagger.annotations.Authorization(value = "{{name}}"{{#isOAuth}}, scopes = {
            {{#scopes}}@io.swagger.annotations.AuthorizationScope(scope = "{{scope}}", description = "{{description}}"){{#hasMore}},
            {{/hasMore}}{{/scopes}}
        }{{/isOAuth}}){{#hasMore}},
        {{/hasMore}}{{/authMethods}}
    }{{/hasAuthMethods}}, tags={ {{#vendorExtensions.x-tags}}"{{tag}}",{{/vendorExtensions.x-tags}} })
    @io.swagger.annotations.ApiResponses(value = { {{#responses}}
        @io.swagger.annotations.ApiResponse(code = {{{code}}}, message = "{{{message}}}", response = {{{baseType}}}.class{{#containerType}}, responseContainer = "{{{containerType}}}"{{/containerType}}){{#hasMore}},
        {{/hasMore}}{{/responses}} })
    public Response {{nickname}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}},{{/allParams}}@Context SecurityContext securityContext, @Context HttpServletRequest httpServletRequest, @Context ResourceInfo resourceInfo)
    throws NotFoundException {
    	try {
    			LOGGER.info("Request received for {}","{{{summary}}}");
    					
        		Response response =  delegate.{{nickname}}({{#allParams}}{{#isFile}}{{paramName}}InputStream, {{paramName}}Detail{{/isFile}}{{^isFile}}{{paramName}}{{/isFile}},{{/allParams}}securityContext,httpServletRequest);
        		LOGGER.info("Request processed successfully for {}","{{{summary}}}");
        		return response;
        	} catch (AnnpurnaServiceException e){
        		LOGGER.error("Error Occurred while processing {{{summary}}} ["+ e.getMessage() + "]",e);
        		return ResponseUtil.getErrorResponse(e);
        	} catch (Throwable e){
        		LOGGER.error("Error Occurred while processing {{{summary}}} ["+ e.getMessage() + "]",e);
        		return ResponseUtil.getErrorResponse(e);
        	}
    }
{{/operation}}
}

{{/operations}}
